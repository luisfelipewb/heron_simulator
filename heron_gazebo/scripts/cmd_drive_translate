#!/usr/bin/env python
# Software License Agreement (BSD)
#
# @author    Luis Batista <luis.batista@gatech.edu>
# @copyright (c) 2025, Georiga Institute of Technology, All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that
# the following conditions are met:
# * Redistributions of source code must retain the above copyright notice, this list of conditions and the
#   following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other materials provided with the distribution.
# * Neither the name of Clearpath Robotics nor the names of its contributors may be used to endorse or
#   promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from uuv_gazebo_ros_plugins_msgs.msg import FloatStamped
from heron_msgs.msg import Drive
import rospy

class CmdDriveTranslator:
    """
    Translates Drive commands to individual thruster commands while simulating realistic
    command update delays.
    """

    def __init__(self):
        # Load configuration parameters
        self.namespace = rospy.get_param("~namespace", "heron")
        if self.namespace == "":
            self.namespace = "heron"
        self.publish_rate = rospy.get_param("~rate", 20)
        self.publish_min_rate = rospy.get_param("~min_rate", 10)
        self.max_update_rate = rospy.get_param("~max_update_rate", 1)

        # Calculate derived parameters
        self.publish_period = 1.0 / self.publish_rate
        self.max_cmd_delta = self.publish_period * self.max_update_rate

        # Initialize state
        self.last_cmd_time = rospy.Time.now()
        self.target_drive_cmd = Drive()
        self.current_drive_cmd = Drive()

        # Set up publishers
        self.p_left = rospy.Publisher(f"{self.namespace}/thrusters/1/input", FloatStamped, queue_size=1)
        self.p_right = rospy.Publisher(f"{self.namespace}/thrusters/0/input", FloatStamped, queue_size=1)

        # Set up subscriber
        self.cmd_drive_sub = rospy.Subscriber("cmd_drive", Drive, self.cmd_drive_callback, queue_size=1)

    def cmd_drive_callback(self, drive):
        """Handle incoming drive commands."""
        self.last_cmd_time = rospy.Time.now()
        self.target_drive_cmd = drive

    def update_and_publish_commands(self):
        """Update current commands and publish to thrusters."""
        # Update left thruster command
        delta_left = self.target_drive_cmd.left - self.current_drive_cmd.left
        self.current_drive_cmd.left += max(min(delta_left, self.max_cmd_delta), -self.max_cmd_delta)

        # Update right thruster command
        delta_right = self.target_drive_cmd.right - self.current_drive_cmd.right
        self.current_drive_cmd.right += max(min(delta_right, self.max_cmd_delta), -self.max_cmd_delta)

        # Prepare and publish messages
        msg = FloatStamped()
        msg.header.stamp = rospy.Time.now()

        msg.data = self.current_drive_cmd.left
        self.p_left.publish(msg)

        msg.data = self.current_drive_cmd.right
        self.p_right.publish(msg)

    def run(self):
        """Main run loop for the node."""
        rate = rospy.Rate(self.publish_rate)

        while not rospy.is_shutdown():
            try:
                # Check for command timeout
                if (rospy.Time.now() - self.last_cmd_time).to_sec() > 1.0 / self.publish_min_rate:
                    self.target_drive_cmd.left = 0
                    self.target_drive_cmd.right = 0

                self.update_and_publish_commands()
                rate.sleep()

            except rospy.ROSInterruptException:
                rospy.loginfo("Node shutdown requested")
                break
            except Exception as e:
                rospy.logerr(f"Error in main loop: {str(e)}")
                break

if __name__ == '__main__':
    try:
        rospy.init_node("cmd_drive_translator")
        node = CmdDriveTranslator()
        node.run()
    except rospy.ROSInterruptException:
        pass
    except Exception as e:
        rospy.logerr(f"Failed to start node: {str(e)}")